is_hetLogVar = getVariableGenes(nCountsMmus, techNoiseLogVarFit$fit, plot=TRUE)
table(is_hetLogVar)
ens_ids_cc <- getEnsembl('GO:0007049')
Y = t(log10(nCountsMmus+1)) #normalised trandformed read counts
genes_het_bool = as.vector(is_het) #variable genes
geneID = rownames(nCountsMmus) #gene IDs
tech_noise = as.vector(techNoise$techNoiseLog) #technical noise
sclvm = new("scLVM")
sclvm = init(sclvm,Y=Y,tech_noise = tech_noise)
ens_ids_cc <- getEnsembl('GO:0007049')
sclvm
str(Y)
str(tech_noise)
techNoise = fitTechnicalNoise(nCountsMmus,nCountsERCC=nCountsERCC, fit_type = 'counts')
str(techNoise)
#rename a few variables
Y = t(log10(nCountsMmus+1)) #normalised trandformed read counts
genes_het_bool = as.vector(is_het) #variable genes
geneID = rownames(nCountsMmus) #gene IDs
tech_noise = as.vector(techNoise$techNoiseLog) #technical noise
sclvm = new("scLVM")
sclvm = init(sclvm,Y=Y,tech_noise = tech_noise)
new
init
sclvm = new("scLVM")
sclvm = init(sclvm,Y=Y,tech_noise = tech_noise)
color.bar <- function(lut, min, max=-min, nticks=11, ticks=seq(min, max, len=nticks), title='') {
scale = (length(lut)-1)/(max-min)
dev.new(width=1.75, height=5)
plot(c(0,10), c(min,max), type='n', bty='n', xaxt='n', xlab='', yaxt='n', ylab='', main=title)
axis(2, ticks, las=1)
for (i in 1:(length(lut)-1)) {
y = (i-1)/scale + min
rect(0,y,10,y+1/scale, col=lut[i], border=NA)
}
}
color.bar(colorRampPalette(c("light blue", "blue", "red","white"))(100), -1)
1314/2
1048/2
library(SCPattern)
load("/Users/jeeachoi/Google Drive/2015 Fall/SCPattern/example_tc_sc_data.rda")
SCPatternExData = Data_nodrop
data(SCPatternExData)
str(SCPatternExData)
CondVector <- rep(paste("t",1:5,sep=""),each=60)
str(CondVector)
Conditions <- factor(CondVector, levels=c("t1","t2","t3","t4","t5"))
str(Conditions)
levels(Conditions)
Sizes <- MedianNorm(SCPatternExData)
DataNorm <- GetNormalizedMat(SCPatternExData, Sizes)
index.use <- which(CondVector=="t1"|CondVector=="t2")
cond.two <- factor(CondVector[index.use], levels=c("t1","t2"))
data.two <- SCPatternExData[,index.use]
data.norm.two <- DataNorm[,index.use]
size.two <- Sizes[index.use]
res.two <- SCPTest(data.two, cond.two, size.two, Dropout.remove=FALSE, Directional = TRUE)
pp.two <- res.two$PP
head(pp.two)
head(two.nondir)
res.two.nondir <- SCPTest(data.two, cond.two, size.two, Dropout.remove=FALSE, Directional = FALSE)
pp.two.nondir <- res.two.nondir$PP
head(pp.two.nondir)
two.nondir <- sort(pp.two.nondir[,"DE"], decreasing=T)
head(two.nondir)
pattern.nondir = two.nondir[which(two.nondir > 0.5)]
str(pattern.nondir)
de.nondir = two.nondir[which(two.nondir > 0.5)]
str(de.nondir)
names(de.nondir)[1:6]
par(mfrow=c(2,3))
for(i in 1:6) VioFun(names(de.nondir)[i],data.norm.two, cond.two)
par(mfrow=c(2,3))
for(i in 1:6) VioFun(names(de.nondir)[i],log2(data.norm.two+1), cond.two, Log="y")
for(i in 1:6) VioFun(names(de.nondir)[i],log2(data.norm.two+1), cond.two)
par(mfrow=c(2,3))
for(i in 1:6) VioFun(names(down.two)[i],data.norm.two, cond.two)
par(mfrow=c(2,3))
for(i in 1:6) VioFun(names(de.nondir)[i],data.norm.two, cond.two)
for(i in 1:6) VioFun(names(de.nondir)[i],data.norm.two, cond.two,Log="y")
200/38
125/26
26/125
38/200
16+17+18
11/60
60/12
12/60
install.packages('devtools')
library(devtools)
install_github('RGLab/MAST')
# *or* if you don't have a working latex setup
install_github(RGLab/'MAST', build_vignettes=FALSE)
vignette('MAST-intro')
2148+1+465+34+668+68
44+8333+12+173+44+11+1559+17+2+5+2
1617+8477
?install.packages
install.packages("/Users/jeeachoi/Downloads/WaveCrest-master/package/WaveCrest_0.0.1.tar.gz",repos=NULL,source=T)
install.packages("/Users/jeeachoi/Downloads/WaveCrest-master/package/WaveCrest_0.0.1.tar.gz",repos=NULL)
install.packages("/Users/jeeachoi/Downloads/WaveCrest-master/package/WaveCrest_0.0.1.tar.gz",repos=NULL,source="local")
library(WaveCrest)
data = read.table("/Users/jeeachoi/Google Drive/2016 Spring/ThompsonLab/LF/H9-96h_EC_188cells.txt",row.names=1,header=T)
data = as.matrix(data)
library(EBSeq)
NormData = GetNormalizedMat(data,MedianNorm(data));str(NormData)
marker = c("CXCR4","SOX17","POU2AF1","MYCT1","DKK2") #,"BKK4"
mdata = NormData[marker,]
str(mdata)
library(WaveCrest)
WaveCrestENI
library(WaveCrest)dim()
dim(mdata)
mdata[,1:4]
fakebef = matrix(0,5,10)
dim(fakebef)
fakevef
fakebef
summary(mdata)
apply(mdata,1,max)
fakeaft = rep(apply(mdata,1,max),10,each=10)
fakeaft[1:5,1:2]
dim(fakeaft)
fakeaft = rep(apply(mdata,1,max),each=10)
dim(fakeaft)
rep(apply(mdata,1,max),each=10)
length(fakeaft)
fakeaft = matrix(rep(apply(mdata,1,max),each=10),5,10)
dim(fakeaft)
fakeaft[1:5,1:2]
fakeaft = matrix(rep(apply(mdata,1,max),each=10),10,5)
fakeaft[1:5,1:2]
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),10,5))
fakeaft[1:5,1:2]
dim(fakeaft)
apply(mdata,1,max)
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),10,5))
fakebef
dim(mdata)
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),10,5))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),10,5))
WCdata = cbind(fakebef,mdata,fakeaft)
dim(WCdata)
ENIRes = WaveCrestENI(marker, mdata, CondVec,N=1000)
CondVec = c(rep(1,10),rep(2,188),rep(3,10))
ENIRes = WaveCrestENI(marker, mdata, CondVec,N=1000)
str(ENIRes)
i=1
i=1
plot(DataNorm[markers[i],],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=markers[i])
plot(WCdata[markers[i],],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=markers[i])
marker
plot(WCdata[marker[i],],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=2
plot(WCdata[marker[i],],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=3
plot(WCdata[marker[i],],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=4
plot(WCdata[marker[i],],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=5
plot(WCdata[marker[i],],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
str(ENIRes)
ENIRes = WaveCrestENI(marker, WCdata, CondVec,N=1000)
str(ENIRes)
i=5
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=4
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=3
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=2
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=1
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=2
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=3
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=4
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=5
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
apply(mdata,1,summary)
marker = c("CXCR4","SOX17","POU2AF1","MYCT1")#,"DKK2") #,"BKK4"
mdata = NormData[marker,]
## WaveCrest ENI
library(WaveCrest)
dim(mdata)
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),10,5))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),10,5))
WCdata = cbind(fakebef,mdata,fakeaft)
CondVec = c(rep(1,10),rep(2,188),rep(3,10))
ENIRes = WaveCrestENI(marker, WCdata, CondVec,N=1000)
CondVec = c(rep(1,10),rep(2,188),rep(3,10))
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),10,4))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),10,4))
WCdata = cbind(fakebef,mdata,fakeaft)
CondVec = c(rep(1,10),rep(2,188),rep(3,10))
ENIRes = WaveCrestENI(marker, WCdata, CondVec,N=1000)
i=5
i=1
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=2
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=3
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=4
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
marker
marker = c("CXCR4","POU2AF1","MYCT1")#,"DKK2") #,"BKK4"
mdata = NormData[marker,]
## WaveCrest ENI
library(WaveCrest)
dim(mdata)
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),10,3))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),10,3))
WCdata = cbind(fakebef,mdata,fakeaft)
CondVec = c(rep(1,10),rep(2,188),rep(3,10))
ENIRes = WaveCrestENI(marker, WCdata, CondVec,N=1000)
str(ENIRes)
i=
1
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=2
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=3
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
str(WCdata)
apply(mdata,1,summary)
marker = c("POU2AF1","MYCT1")#,"DKK2") #,"BKK4"
mdata = NormData[marker,]
## WaveCrest ENI
library(WaveCrest)
dim(mdata)
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),10,3))
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),10,2))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),10,2))
WCdata = cbind(fakebef,mdata,fakeaft)
CondVec = c(rep(1,10),rep(2,188),rep(3,10))
ENIRes = WaveCrestENI(marker, WCdata, CondVec,N=1000)
str(ENIRes)
i=1
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
i=2
plot(WCdata[marker[i],ENIRes],col=as.numeric(CondVec),
ylab="Normalized expression", xlab="Original order",main=marker[i])
ENIRes
marker = c("POU2AF1")#,"MYCT1")#,"DKK2") #,"BKK4"
mdata = NormData[marker,]
## WaveCrest ENI
library(WaveCrest)
dim(mdata)
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),10,2))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),10,2))
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),10,1))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),10,1))
WCdata = cbind(fakebef,mdata,fakeaft)
apply(mdata,1,min)
min(mdata)
max(mdata)
fakebef = t(matrix(rep(
,each=10),10,1))
fakebef = t(matrix(rep(0,each=10,10,1))
)
fakebef
fakebef=rep(0,10)
fakeaft=rep(max(mdata),10)
fakeaft
WCdata = cbind(fakebef,mdata,fakeaft)
WCdata = c(fakebef,mdata,fakeaft)
CondVec = c(rep(1,10),rep(2,188),rep(3,10))
ENIRes = WaveCrestENI(marker, WCdata, CondVec,N=1000)
sort(POU2AF1)
marker = c("CXCR4","SOX17","POU2AF1","MYCT1")#,"DKK2") #,"BKK4"
mdata = NormData[marker,]
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),10,4))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),10,4))
WCdata = cbind(fakebef,mdata,fakeaft)
CondVec = c(rep(1,10),rep(2,188),rep(3,10))
sort(mdata["POU2AF1",])
cbind(mdata["POU2AF1",],1:188)
tmp[order(tmp[,2]),]
tmp = cbind(mdata["POU2AF1",],1:188)
tmp[order(tmp[,2]),]
tmp[order(tmp[,1]),]
tmp = cbind(mdata["POU2AF1",],1:188)
tmp2 = tmp[order(tmp[,1]),]
ENIRes = tmp2[,2]
ENIRes
i=2;plot(WCdata[marker[i],ENIRes],main=marker[i])
i=2;plot(mdata[marker[i],ENIRes],main=marker[i])
marker
i=1;plot(mdata[marker[i],ENIRes],main=marker[i])
i=3;plot(mdata[marker[i],ENIRes],main=marker[i])
i=4;plot(mdata[marker[i],ENIRes],main=marker[i])
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(shiny)
library(shinyFiles)
library(gdata)
fakebef = t(matrix(rep(apply(mdata,1,min),each=10),20,4))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),20,4))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),20,4))
fakeaft
apply(mdata,1,max)
fakeaft = t(matrix(rep(apply(mdata,1,max),each=10),20,4))
fakebef = t(matrix(rep(apply(mdata,1,min),each=20),20,4))
fakeaft = t(matrix(rep(apply(mdata,1,max),each=20),20,4))
fakebef
fakeaft
the.file <-"data.csv"
Sep=strsplit(the.file,split="\\.")[[1]]
Sep
strsplit(the.file,split="\\.")
Sep[length(Sep)]
getwd()
ui <- fluidPage()
server <-function(input, output){}
shinyApp(ui=ui,server=server)
shiny::runApp('Google Drive/2016 Spring/ThompsonLab/WCShiny')
shiny::runApp('Google Drive/2016 Spring/ThompsonLab/WCShiny')
shiny::runApp('Google Drive/2016 Spring/ThompsonLab/WCShiny')
shiny::runApp('Google Drive/2016 Spring/ThompsonLab/WCShiny')
library(Shiny)
library(shiny)
ui<-fluidPage()
server <-function(input,output){}
shinyApp(ui=ui,server=server)
shiny::runApp('Google Drive/2016 Spring/ThompsonLab/WCShiny')
library(shiny)
ui<-fluidPage()
server <-function(input,output){}
shinyApp(ui=ui,server=server)
shiny::runApp()
getwd()
shiny::runApp()
getwd()
load("/Users/jeeachoi/Downloads/GeneMat.rda")
ls()
str(GeneMat)
load("/Users/jeeachoi/Downloads/MultiGeneMat.rda")
ls()
str(MultiGeneMat)
load("/Users/jeeachoi/Downloads/IsoList.rda")
ls()
str(IsoList)
str(GeneMat)
load("/Users/jeeachoi/Downloads/GeneMat.rda")
Conditions=as.factor(rep(c("C1","C2"),each=5))
set.seed(500)
library(gplots)
library(OSCOPE)
library(OSCOPEsim2)
library(Oscope)
Strong=paste0("Gene_",(1:90)[(1:90)%%2==1])
Weak=paste0("Gene_",(1:90)[(1:90)%%2==0])
Sp1=paste0("Gene_",1:30)  ##3 curves
Sp2=paste0("Gene_",31:60) ##2 curves
Sp3=paste0("Gene_",61:90) ##5 curves
GpList=list(Sp1Str=intersect(Strong,Sp1),Sp1Wk=intersect(Weak,Sp1),
Sp2Str=intersect(Strong,Sp2),Sp2Wk=intersect(Weak,Sp2),
Sp3Str=intersect(Strong,Sp3),Sp3Wk=intersect(Weak,Sp3),
Noi=setdiff(paste0("Gene_",1:1000),c(Strong,Weak)))
RunNI=T
Checks=T
aa=SimuOSCOPE(Withfield = F)
Data=aa$rdsinData
DataOri=aa$sinData
dim(DataOri)
par(mfrow=c(6,5),mar=c(0,0,0,0))
for(i in 1:1000)plot(DataOri[i,],type="l")
par(mfrow=c(3,3),mar=c(0,0,0,0))
for(i in 1:9)plot(DataOri[i,],type="l")
for(i in 1:9)plot(DataOri[i,],type="p")
shiny::runApp('backup_2011-2015/2016 Spring/ThompsonLab/PCA_Shiny')
shiny::runApp('Downloads/WaveCrest-master')
.libPaths()
library(EBSeq)
Conditions=c("C1","C1","C2","C2","C3","C3")
> PosParti=GetPatterns(Conditions)
Conditions=c("C1","C1","C2","C2","C3","C3","C4","C4");PosParti=GetPatterns(Conditions)
PosParti
GetPatterns
nkpartitions
PosParti
library(shiny)
load("/Users/jeeachoi/Desktop/LolliExData.rda")
load("/Users/jeeachoi/Desktop/Domain_uniprot_Swiss_Human.rda")
load("/Users/jeeachoi/Desktop/lolliexdata.rda")
load("/Users/jeeachoi/Desktop/Domain_uniprot_Swiss_Human.rda")
load("/Users/jeeachoi/Desktop/lolliexdata.rda")
save(Domain_uniprot_Swiss_Human,lolliexdata,file="/Users/jeeachoi/Desktop/LolliExData.rda")
save(Domain_uniprot_Swiss_Human,lolliexdata,file="/Users/jeeachoi/LolliExData.rda")
load("/Users/jeeachoi/Desktop/LolliExData.rda")
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
?EBTest
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
ebseqinfo = sessionInfo(package="EBSeq")
ebseqinfo_print = ebseqinfo$otherPkgs
ebseqinfo_print
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
getwd()
read.table("GeneMat.xls")
a=read.table(GeneMat,stringsAsFactors=F,header=TRUE, row.names=1,comment.char="")
a=read.table(GeneMat.xls,stringsAsFactors=F,header=TRUE, row.names=1,comment.char="")
a=read.table("GeneMat.xls",stringsAsFactors=F,header=TRUE, row.names=1,comment.char="")
a=read.table("GeneMat.xls",stringsAsFactors=F,header=TRUE, row.names=1)
a=read.table("GeneMat.xls",stringsAsFactors=F,header=TRUE)
a=read.table("GeneMat.xls")
a=read.table("GeneMat.xls",header=TRUE, row.names=1,comment.char="")
?read.table
a=read.xls("GeneMat.xls",header=TRUE, row.names=1,comment.char="")
library(gdata)
a=read.xls("GeneMat.xls",header=TRUE, row.names=1,comment.char="")
str(a)
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
?EBTest
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
IgVIn=read.csv("Ig.csv",stringsAsFactors=F,header=F)
str(IgVIn)
str(IgVIn[[1]])
str(GeneMat)
str(a)
dim(a)
a=a[1:6000,]
cond=c(1,1,1,1,1,2,2,2,2,2)
EBOut=EBTest(Data=a,NgVector=Ig,Conditions=as.factor(cond),sizeFactors=c(1,1,1,1,1,1,1,1,1,1), maxround=2 Qtrm=.99, QtrmCut=0)
Ig=IgVIn[[1]]
EBOut=EBTest(Data=a,NgVector=Ig,Conditions=as.factor(cond),sizeFactors=c(1,1,1,1,1,1,1,1,1,1), maxround=2 Qtrm=.99, QtrmCut=0)
EBOut=EBTest(Data=a,NgVector=Ig,Conditions=as.factor(cond),sizeFactors=c(1,1,1,1,1,1,1,1,1,1), maxround=2, Qtrm=.99, QtrmCut=0)
EBOut=EBTest(Data=as.matrix(a),NgVector=Ig,Conditions=as.factor(cond),sizeFactors=c(1,1,1,1,1,1,1,1,1,1), maxround=2, Qtrm=.99, QtrmCut=0)
EBTest
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
IgV=read.csv("IgvVecTwo.csv")
IgV=read.csv("IsoVecTwo.csv")
head(IgV0)
head(IgV)
IgV
length(IgV)
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
ls()
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
IgV=read.csv("IsoVecTwo.csv")
NgList=GetNg(IgV[,1], IgV[,2])
IgV[,1]
?GetNg
NgList=GetNg(IgV[,1], IgV[,2])
NgList=GetNg(IgV[,1], IgV[,2], TrunThre = 2)
IsoNgTrun=NgList$IsoformNgTrun
EBOut=EBTest(Data=Data,NgVector=IsoNgTrun,Conditions=as.factor(GroupV),sizeFactors=Sizes, maxround=List$EMIter, Qtrm=.99, QtrmCut=0)
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq-Shiny')
shiny::runApp('Box Sync/2016 Fall/EBSeq')
